"0","run_sim <- function(reps = 50, train_size = 1500, train = TRUE, metric = ""RSS""){"
"0","  # pb <- txtProgressBar(min = 0, max = length(reps), style = 3, width = 50, char = ""="")"
"0","  cat('LOGGER: Entering main method for training \n')"
"0","  return_mat <- matrix(NA, nrow = reps, ncol = length(lset))"
"0","  for (i in 1:reps){"
"0","    cat(glue('\n Training Model {i} \n'))"
"0","    features_for_training <- sample(features, 10) %>% colnames() %>% as.vector()"
"0","    features %>% "
"0","      select(all_of(features_for_training)) -> X"
"0","    y <- crime$X8 %>% as.data.frame()"
"0","    train_index <- sample(1:nrow(X), train_size)"
"0",""
"0",""
"0","    for (j in 1:length(lset)){"
"0","      MDL <- glmnet(X[train_index,], y[train_index,], nlambda = 1, alpha = 0, family = ""gaussian"", lambda = lset[j])"
"0","      if (metric == ""RSS""){"
"0","        if (train){"
"0","          return_mat[i,j] <- deviance(MDL)"
"0","        } "
"0","        else {"
"0","          preds <- predict(MDL, newx = X[-train_index,] %>% data.matrix())"
"0","          return_mat[i,j] <- sum((y[-train_index,] - preds)^2)"
"0","        }"
"0","      } else if (metric == ""Var""){"
"0","          return_mat[i,j] <- var(as.matrix(MDL$beta))"
"0","      } else{"
"0","        stop('Invalid Metric Supplied')"
"0","      }"
"0","    }"
"0","    "
"0","    # setTxtProgressBar(pb, i)"
"0","  }"
"0","  return(colMeans(return_mat))"
"0","}"
