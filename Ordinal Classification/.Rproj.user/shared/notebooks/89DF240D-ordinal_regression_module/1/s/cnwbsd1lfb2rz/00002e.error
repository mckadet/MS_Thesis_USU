{"frames":[{"func":"train(as.numeric(class) ~ ., data = train %>% select(-id), method = \"neuralnet\", \n    threshold = 0.1, rep = 1, preProc = c(\"center\", \"scale\"), \n    tuneGrid = tune.grid.neuralnet, trControl = control)","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"train.formula(as.numeric(class) ~ ., data = train %>% select(-id), \n    method = \"neuralnet\", threshold = 0.1, rep = 1, preProc = c(\"center\", \n        \"scale\"), tuneGrid = tune.grid.neuralnet, trControl = control)","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"train(x, y, weights = w, ...)","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"train.default(x, y, weights = w, ...)","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"nominalTrainWorkflow(x = x, y = y, wts = weights, info = trainInfo, \n    method = models, ppOpts = preProcess, ctrl = trControl, lev = classLevels, \n    ...)","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"foreach(iter = seq(along = resampleIndex), .combine = \"c\", .verbose = FALSE, \n    .export = export, .packages = \"caret\") %:% foreach(parm = 1L:nrow(info$loop), \n    .combine = \"c\", .verbose = FALSE, .export = export, .packages = \"caret\") %op% \n    { ...","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"e$fun(obj, substitute(ex), parent.frame(), e$data)","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"tryCatch({\n    repeat {\n        args <- nextElem(it)\n        if (obj$verbose) { ...","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"tryCatchList(expr, classes, parentenv, handlers)","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"tryCatchOne(expr, names, parentenv, handlers[[1L]])","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"doTryCatch(return(expr), name, parentenv, handler)","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"tryCatch(eval(xpr, envir = envir), error = function(e) e)","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"tryCatchList(expr, classes, parentenv, handlers)","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"tryCatchOne(expr, names, parentenv, handlers[[1L]])","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"doTryCatch(return(expr), name, parentenv, handler)","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"eval(xpr, envir = envir)","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"eval(xpr, envir = envir)","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"try(createModel(x = subset_x(x, modelIndex), y = y[modelIndex], \n    wts = wts[modelIndex], method = method, tuneValue = info$loop[parm, \n        , drop = FALSE], obsLevels = lev, pp = ppp, classProbs = ctrl$classProbs, \n    sampling = ctrl$sampling, ...), silent = TRUE)","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"tryCatch(expr, error = function(e) {\n    call <- conditionCall(e)\n    if (!is.null(call)) {\n        if (identical(call[[1L]], quote(doTryCatch)))  ...","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"tryCatchList(expr, classes, parentenv, handlers)","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"tryCatchOne(expr, names, parentenv, handlers[[1L]])","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"doTryCatch(return(expr), name, parentenv, handler)","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"createModel(x = subset_x(x, modelIndex), y = y[modelIndex], wts = wts[modelIndex], \n    method = method, tuneValue = info$loop[parm, , drop = FALSE], \n    obsLevels = lev, pp = ppp, classProbs = ctrl$classProbs, \n    sampling = ctrl$sampling, ...)","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"method$fit(x = x, y = y, wts = wts, param = tuneValue, lev = obsLevels, \n    last = last, classProbs = classProbs, ...)","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"neuralnet::neuralnet(form, data = dat, hidden = nodes, ...)","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"lapply(1:rep, function(i) {\n    if (lifesign != \"none\") {\n        lifesign <- display(hidden, threshold, rep, i, lifesign)\n    } ...","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"FUN(X[[i]], ...)","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"calculate.neuralnet(learningrate.limit = learningrate.limit, \n    learningrate.factor = learningrate.factor, covariate = covariate, \n    response = response, data = data, model.list = model.list, \n    threshold = threshold, lifesign.step = lifesign.step, stepmax = stepmax,  ...","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"rprop(weights = weights, threshold = threshold, response = response, \n    covariate = covariate, learningrate.limit = learningrate.limit, \n    learningrate.factor = learningrate.factor, stepmax = stepmax, \n    lifesign = lifesign, lifesign.step = lifesign.step, act.fct = act.fct,  ...","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"calculate.gradients(weights = weights, length.weights = length.weights, \n    neurons = result$neurons, neuron.deriv = result$neuron.deriv, \n    err.deriv = err.deriv, exclude = exclude, linear.output = linear.output)","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0}],"message":"Error in base::try(vis_results, silent = TRUE) : \n  object 'vis_results' not found\n"}