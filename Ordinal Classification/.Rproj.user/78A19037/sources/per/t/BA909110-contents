---
title: "Stat6100_Final_Project"
author: "McKade Thomas"
date: "4/15/2022"
output: pdf_document
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = FALSE)
```


```{r libraries, include = FALSE}
source('C:/Users/mckad/Documents/USU Coursework/Thesis Work/Ordinal Classification/ordinal_helper_methods.R')
library(tidyverse)
library(glmnet)
```

```{r data}
###################### Data Pre-Processing ####################### 
# Read in the data
crime <- read.table('C:/Users/mckad/Documents/USU Coursework/Thesis Work/Ordinal Classification/datasets/crime/crime.data', sep = ",", header = T)

lset <- 10^(seq(from = -8, to = 0, by = 0.2))

```


```{r EDA}
hist(crime$X8, main = "Violent Crimes/100k Population", xlab = "Violent Crimes")
```




```{r glmnet}
run_sim <- function(reps = 50, train_size = 1500, train = TRUE, metric = "RSS"){
  # pb <- txtProgressBar(min = 0, max = length(reps), style = 3, width = 50, char = "=")
  cat('LOGGER: Entering main method for training \n')
  return_mat <- matrix(NA, nrow = reps, ncol = length(lset))
  for (i in 1:reps){
    cat(glue('\n Training Model {i} \n'))
    features_for_training <- sample(features, 10) %>% colnames() %>% as.vector()
    features %>% 
      select(all_of(features_for_training)) -> X
    y <- crime$X8 %>% as.data.frame()
    train_index <- sample(1:nrow(X), train_size)


    for (j in 1:length(lset)){
      MDL <- glmnet(X[train_index,], y[train_index,], nlambda = 1, alpha = 0, family = "gaussian", lambda = lset[j])
      if (metric == "RSS"){
        if (train){
          return_mat[i,j] <- deviance(MDL)
        } 
        else {
          preds <- predict(MDL, newx = X[-train_index,] %>% data.matrix())
          return_mat[i,j] <- sum((y[-train_index,] - preds)^2)
        }
      } else if (metric == "Var"){
          return_mat[i,j] <- var(as.matrix(MDL$beta))
      } else{
        stop('Invalid Metric Supplied')
      }
    }
    
    # setTxtProgressBar(pb, i)
  }
  return(colMeans(return_mat))
}
```


```{r}
plot(log(lset), log(run_sim()), 
     main = "RSS Train for Increasing Lambda Vals",
     ylab = "RSS", 
     xlab = "Logged Lambda")

plot(log(lset), log(run_sim(train=FALSE)), 
     main = "RSS Test for Increasing Lambda Vals",
     ylab = "RSS", 
     xlab = "Logged Lambda")

```


```{r}
plot(log(lset), log(run_sim(metric = "Var")), 
     main = "Variance for Train Increasing Lambda Vals",
     ylab = "Variance", 
     xlab = "Logged Lambda")
```
