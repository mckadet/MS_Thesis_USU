theme_classic() +
theme(axis.title.y.right = element_text(color = "lightgreen"))
g2 <- plot_mse_change(mse_perc_change_mat = mse_perc_change_mat)
return_plot <- grid.arrange(g1, g2, nrow=2)
return(return_plot)
}
plot_best_tree_mc <- function(df, binned_best_trees_mat, cont_best_trees_mat, mse_perc_change_mat,
title = "",
noise_added = FALSE){
# comb <- as.data.frame(
#   cbind(log10(SIZES), log10(colMeans(binned_best_trees_mat)),
#         log10(colMeans(cont_best_trees_mat)), colMeans(mse_perc_change_mat))
# )
# colnames(comb) <- c("size", "Binned", "Cont", "MSE_Change")
# comb %>% gather(key = "type", value = "value", -size) -> comb
# ggplot(comb, aes(x = size, y = value)) +
#   geom_line(aes(color = type)) +
#   geom_point(aes(color = type)) +
#   scale_color_manual(values = c("grey", "cornflowerblue", "#99FFFF")) +
#   labs(title = title,
#        x = "Log10 Sample Size",
#        y = "Log10 Optimal Treees") +
#   theme_classic()
g1 <- ggplot(as.data.frame(log10(SIZES)), aes(x = log10(SIZES))) +
geom_line(aes(y = log10(colMeans(binned_best_trees_mat))), col = "grey") +
geom_point(aes(y = log10(colMeans(binned_best_trees_mat))), col = "grey") +
geom_line(aes(y = log10(colMeans(cont_best_trees_mat))), col = "cornflowerblue") +
geom_point(aes(y = log10(colMeans(cont_best_trees_mat))), col = "cornflowerblue") +
geom_histogram(aes(y = colMeans(mse_perc_change_mat)),
stat = "identity", alpha = .4,
fill = "lightgreen") +
scale_y_continuous(name = "log10 Optimal Trees",
sec.axis = sec_axis(~.*5, name="MSE Change (%)")) +
labs(title = "",
x = "Log10 Sample Size") +
theme_classic() +
theme(axis.title.y.right = element_text(color = "lightgreen"))
g2 <- plot_mse_change(mse_perc_change_mat = mse_perc_change_mat)
return_plot <- grid.arrange(g1, g2, nrow=2)
return(return_plot)
}
orchestrate_sample_sim(MC, SIZES, concrete_encoded, cont_response = "strength", TREE_LENGTH = 10, num_classes = 10)
plot_mse_change <- function(mse_perc_change_mat){
g <- ggplot(data = as.data.frame(colMeans(mse_perc_change_mat)),
aes(y = colMeans(mse_perc_change_mat))) +
geom_histogram(stat = "identity", alpha = .4,
fill = "lightgreen")
return(g)
}
## GLOBALS
# SIZES = unique(round(10^(seq(from=1.2, to=3.8, length=20))))*5
SIZES = unique(round(10^(seq(from=1, to=2.27, length=5))))*5
orchestrate_sample_sim(MC, SIZES, concrete_encoded, cont_response = "strength", TREE_LENGTH = 10, num_classes = 10)
plot_mse_change <- function(mse_perc_change_mat){
g <- ggplot(data = as.data.frame(colMeans(mse_perc_change_mat)),
aes(x = colMeans(mse_perc_change_mat))) +
geom_histogram(stat = "identity", alpha = .4,
fill = "lightgreen")
return(g)
}
orchestrate_sample_sim(MC, SIZES, concrete_encoded, cont_response = "strength", TREE_LENGTH = 10, num_classes = 10)
plot_best_tree_mc <- function(df, binned_best_trees_mat, cont_best_trees_mat, mse_perc_change_mat,
title = "",
noise_added = FALSE){
# comb <- as.data.frame(
#   cbind(log10(SIZES), log10(colMeans(binned_best_trees_mat)),
#         log10(colMeans(cont_best_trees_mat)), colMeans(mse_perc_change_mat))
# )
# colnames(comb) <- c("size", "Binned", "Cont", "MSE_Change")
# comb %>% gather(key = "type", value = "value", -size) -> comb
# ggplot(comb, aes(x = size, y = value)) +
#   geom_line(aes(color = type)) +
#   geom_point(aes(color = type)) +
#   scale_color_manual(values = c("grey", "cornflowerblue", "#99FFFF")) +
#   labs(title = title,
#        x = "Log10 Sample Size",
#        y = "Log10 Optimal Treees") +
#   theme_classic()
g1 <- ggplot(as.data.frame(log10(SIZES)), aes(x = log10(SIZES))) +
geom_line(aes(y = log10(colMeans(binned_best_trees_mat))), col = "grey") +
geom_point(aes(y = log10(colMeans(binned_best_trees_mat))), col = "grey") +
geom_line(aes(y = log10(colMeans(cont_best_trees_mat))), col = "cornflowerblue") +
geom_point(aes(y = log10(colMeans(cont_best_trees_mat))), col = "cornflowerblue") +
# geom_histogram(aes(y = colMeans(mse_perc_change_mat)),
#                stat = "identity", alpha = .4,
#                fill = "lightgreen") +
# scale_y_continuous(name = "log10 Optimal Trees",
#                    sec.axis = sec_axis(~.*5, name="MSE Change (%)")) +
labs(title = "",
x = "Log10 Sample Size") +
theme_classic() +
theme(axis.title.y.right = element_text(color = "lightgreen"))
g2 <- plot_mse_change(mse_perc_change_mat)
return_plot <- grid.arrange(g1, g2, nrow=2)
return(return_plot)
}
plot_mse_change <- function(mse_perc_change_mat){
g <- ggplot(data = as.data.frame(colMeans(mse_perc_change_mat)),
aes(x = colMeans(mse_perc_change_mat))) +
geom_bar(stat = "identity", alpha = .4,
fill = "lightgreen")
return(g)
}
orchestrate_sample_sim(MC, SIZES, concrete_encoded, cont_response = "strength", TREE_LENGTH = 10, num_classes = 10)
plot_mse_change <- function(mse_perc_change_mat){
g <- ggplot(data = as.data.frame(colMeans(mse_perc_change_mat)),
aes(colMeans(mse_perc_change_mat))) +
geom_bar(alpha = .4,
fill = "lightgreen")
return(g)
}
orchestrate_sample_sim(MC, SIZES, concrete_encoded, cont_response = "strength", TREE_LENGTH = 10, num_classes = 10)
mse_perc_change_mat
plot_mse_change <- function(mse_perc_change_mat, SIZES){
g <- ggplot(data = as.data.frame(colMeans(mse_perc_change_mat)),
aes(x = log10(SIZES))) +
geom_bar(aes(y = colMeans(mse_perc_change_mat))),
alpha = .4,  fill = "lightgreen") + theme_classic()
return(g)
}
plot_mse_change <- function(mse_perc_change_mat, SIZES){
g <- ggplot(data = as.data.frame(colMeans(mse_perc_change_mat)),
aes(x = log10(SIZES))) +
geom_bar(aes(y = colMeans(mse_perc_change_mat)),
alpha = .4,  fill = "lightgreen") + theme_classic()
return(g)
}
orchestrate_sample_sim(MC, SIZES, concrete_encoded, cont_response = "strength", TREE_LENGTH = 10, num_classes = 10)
plot_best_tree_mc <- function(df, binned_best_trees_mat, cont_best_trees_mat, mse_perc_change_mat,
title = "",
noise_added = FALSE){
# comb <- as.data.frame(
#   cbind(log10(SIZES), log10(colMeans(binned_best_trees_mat)),
#         log10(colMeans(cont_best_trees_mat)), colMeans(mse_perc_change_mat))
# )
# colnames(comb) <- c("size", "Binned", "Cont", "MSE_Change")
# comb %>% gather(key = "type", value = "value", -size) -> comb
# ggplot(comb, aes(x = size, y = value)) +
#   geom_line(aes(color = type)) +
#   geom_point(aes(color = type)) +
#   scale_color_manual(values = c("grey", "cornflowerblue", "#99FFFF")) +
#   labs(title = title,
#        x = "Log10 Sample Size",
#        y = "Log10 Optimal Treees") +
#   theme_classic()
g1 <- ggplot(as.data.frame(log10(SIZES)), aes(x = log10(SIZES))) +
geom_line(aes(y = log10(colMeans(binned_best_trees_mat))), col = "grey") +
geom_point(aes(y = log10(colMeans(binned_best_trees_mat))), col = "grey") +
geom_line(aes(y = log10(colMeans(cont_best_trees_mat))), col = "cornflowerblue") +
geom_point(aes(y = log10(colMeans(cont_best_trees_mat))), col = "cornflowerblue") +
# geom_histogram(aes(y = colMeans(mse_perc_change_mat)),
#                stat = "identity", alpha = .4,
#                fill = "lightgreen") +
# scale_y_continuous(name = "log10 Optimal Trees",
#                    sec.axis = sec_axis(~.*5, name="MSE Change (%)")) +
labs(title = "",
x = "Log10 Sample Size") +
theme_classic() +
theme(axis.title.y.right = element_text(color = "lightgreen"))
g2 <- plot_mse_change(mse_perc_change_mat, SIZES)
return_plot <- grid.arrange(g1, g2, nrow=2)
return(return_plot)
}
orchestrate_sample_sim(MC, SIZES, concrete_encoded, cont_response = "strength", TREE_LENGTH = 10, num_classes = 10)
plot_mse_change <- function(mse_perc_change_mat, SIZES){
g <- ggplot(data = as.data.frame(colMeans(mse_perc_change_mat)),
aes(x = log10(SIZES))) +
geom_histogram(aes(y = colMeans(mse_perc_change_mat)),
stat = "identity",
alpha = .4,  fill = "lightgreen") + theme_classic()
return(g)
}
orchestrate_sample_sim(MC, SIZES, concrete_encoded, cont_response = "strength", TREE_LENGTH = 10, num_classes = 10)
## GLOBALS
# SIZES = unique(round(10^(seq(from=1.2, to=3.8, length=20))))*5
SIZES = unique(round(10^(seq(from=1, to=2.27, length=20))))*5
orchestrate_sample_sim(MC, SIZES, concrete_encoded, cont_response = "strength", TREE_LENGTH = 10, num_classes = 10)
source("~/USU Coursework/Thesis Work/Ordinal Classification/main_helper_methods.R")
plot_mse_change <- function(mse_perc_change_mat, SIZES){
g <- ggplot(data = as.data.frame(colMeans(mse_perc_change_mat)),
aes(x = log10(SIZES))) +
geom_histogram(aes(y = colMeans(mse_perc_change_mat)),
stat = "identity",
alpha = .4,  fill = "lightgreen") +
theme_classic() +
labs(x = "Log10 Sample Size",
y = "RMSE Percent Change")
return(g)
}
orchestrate_sample_sim(MC, SIZES, concrete_encoded, cont_response = "strength", TREE_LENGTH = 10, num_classes = 10)
MC <- 20
orchestrate_sample_sim(MC, SIZES, concrete_encoded, cont_response = "strength", TREE_LENGTH = 10, num_classes = 10)
MC <- 50
orchestrate_sample_sim(MC, SIZES, concrete_encoded, cont_response = "strength", TREE_LENGTH = 10, num_classes = 10)
concrete <- read.table('C:/Users/mckad/Documents/USU Coursework/Thesis Work/Ordinal Classification/datasets/concrete/concrete.csv', sep = ",", header = TRUE)
names <- c("cement", "blast", "fly_ash", "water", "plastic", "coarse", "fine", "age", "strength")
colnames(concrete) <- names
concrete_binned <- bin_df(concrete, "strength")
concrete_encoded <- concrete_binned[,c(-(ncol(concrete_binned)-1),-ncol(concrete_binned))]
orchestrate_sample_sim(MC, SIZES, concrete_encoded, cont_response = "strength", TREE_LENGTH = 10)
TREE_LENGTH <- 30
orchestrate_sample_sim(MC, SIZES, concrete_encoded, cont_response = "strength", num_classes = 10)
orchestrate_sample_sim(MC, SIZES, concrete_encoded, cont_response = "strength", num_classes = 10)
concrete <- read.table('C:/Users/mckad/Documents/USU Coursework/Thesis Work/Ordinal Classification/datasets/concrete/concrete.csv', sep = ",", header = TRUE)
names <- c("cement", "blast", "fly_ash", "water", "plastic", "coarse", "fine", "age", "strength")
colnames(concrete) <- names
concrete_binned <- bin_df(concrete, "strength", num_bins = 10)
concrete_encoded <- concrete_binned[,c(-(ncol(concrete_binned)-1),-ncol(concrete_binned))]
orchestrate_sample_sim(MC, SIZES, concrete_encoded, cont_response = "strength", num_classes = 10)
concrete <- read.table('C:/Users/mckad/Documents/USU Coursework/Thesis Work/Ordinal Classification/datasets/concrete/concrete.csv', sep = ",", header = TRUE)
names <- c("cement", "blast", "fly_ash", "water", "plastic", "coarse", "fine", "age", "strength")
colnames(concrete) <- names
concrete_binned <- bin_df(concrete, "strength")
concrete_encoded <- concrete_binned[,c(-(ncol(concrete_binned)-1),-ncol(concrete_binned))]
orchestrate_sample_sim(MC, SIZES, concrete_encoded, cont_response = "strength", TREE_LENGTH = 10)
RF_perc_change <- function(return_df, train, test, cont_response){
best_binned_trees <- return_df[which.min(return_df$test_mat), "tree_set"] # 316
cont_mse <- sqrt(return_df[return_df$tree_set == best_binned_trees, "test_cont_mat"])
RF_mse <- RF_performance(train, test, cont_response)
return(
((cont_mse - RF_mse) / RF_mse)*100
)
}
orchestrate_sim <- function(dataset, cont_response, sample_size = 1000, RMSE = TRUE, plot_title = "",
num_classes = 5, MC = 25, mc_tree_length = 30, mc_min_trees = 1, mc_max_trees = 5){
full_start_time = Sys.time()
binned_best_mat <- replicate(mc_tree_length, numeric(MC))
cont_best_mat <- replicate(mc_tree_length, numeric(MC))
mse_change_mat <- replicate(mc_tree_length, numeric(MC))
rf_binned_test_mat <- vector(mode = "list", length = length(MC)) %>% unlist()
for (i in 1:MC) {
start_time = Sys.time()
cat(glue('Begin Monte Carlo Iteration {i} of {MC}'), '\n')
if (num_classes == 10){
sub_sample <- sample_by_distribution_ten(dataset, size = sample_size)
} else if (num_classes == 5){
sub_sample <- sample_by_distribution(dataset, size = sample_size)
} else{
cat(glue("Number of classes {num_classes} is invalid."))
return(NA)
}
train <- sub_sample[[1]]
test <- sub_sample[[2]]
return_df <- run_sim(train = sub_sample[[1]],
test = sub_sample[[2]],
cont_response = cont_response,
min_trees = mc_min_trees,
max_trees = mc_max_trees,
tree_length = mc_tree_length,
plot = FALSE,
R2 = FALSE)
binned_best_mat[i,] <- return_df$test_mat
cont_best_mat[i,] <- return_df$test_cont_mat
mse_change_mat[i,] <- return_df$mse_perc_change
rf_binned_test_mat[i] <- RF_performance(train, test, cont_response)
cat(glue('--End Iteration {i} of {MC}: Completed in {round(Sys.time() - start_time,2)}'),'\n')
}
cat(glue('Full Run Success: Completed in {round(Sys.time() - full_start_time,2)}','\n'))
cat('\n', glue('Baseline RF RMSE: {round(mean(sqrt(rf_binned_test_mat)),3)}'), '\n')
cat(glue('Best Binned RMSE: {round(min(sqrt(colMeans(binned_best_mat))),3)}'),  '\n')
cat(glue('Best Cont RMSE: {round(min(colMeans(cont_best_mat)),3)}'), '\n')
plot_return_mc(unique(round(10^(seq(from=mc_min_trees, to=mc_max_trees, length=mc_tree_length)))),
binned_best_mat, cont_best_mat, rf_binned_test_mat, RMSE = RMSE, title = plot_title)
}
orchestrate_sample_sim <- function(MC, SIZES, dataset, cont_response,
MIN_TREES = 1, MAX_TREES = 3,TREE_LENGTH = 20, num_classes = 5){
binned_best_trees_mat <- matrix(NA, nrow = MC, ncol = length(SIZES))
cont_best_trees_mat <- matrix(NA, nrow = MC, ncol = length(SIZES))
mse_perc_change_mat <- matrix(NA, nrow = MC, ncol = length(SIZES))
# rf_mse_perc_change <- vector(mode = "list", length = length(MC)) %>% unlist()
full_start_time = Sys.time()
for(i in 1:MC){
start_time = Sys.time()
cat(glue('Begin Monte Carlo Iteration {i} of {MC}'), '\n')
for (j in 1:length(SIZES)){
cat(glue('----Begin Iteration {j} of {length(SIZES)} with n = {SIZES[j]}', '\n', '\n'))
if (num_classes == 10){
sub_sample <- sample_by_distribution_ten(dataset, size = SIZES[j])
} else if (num_classes == 5){
sub_sample <- sample_by_distribution(dataset, size = SIZES[j])
} else{
cat(glue("Number of classes {num_classes} is invalid."))
return(NA)
}
train <- sub_sample[[1]]
test <- sub_sample[[2]]
return_df <- run_sim(train = train,
test = test,
cont_response = cont_response,
min_trees = MIN_TREES,
max_trees = MAX_TREES,
tree_length = TREE_LENGTH,
plot = FALSE)
binned_thresh <- min(return_df$test_mat) * 1.01
cont_thresh <- min(return_df$test_cont_mat) * 1.01
binned_best_trees_mat[i,j] <- min(return_df[which(return_df$test_mat <= binned_thresh),
"tree_set"])
cont_best_trees_mat[i,j] <- min(return_df[which(return_df$test_cont_mat <= cont_thresh),
"tree_set"])
# mse_perc_change_mat[i,j] <- mean(return_df$mse_perc_change)
mse_perc_change_mat[i,j] <- RF_perc_change(return_df, train, test, cont_response)
}
# rf_mse_perc_change[i] <- RF_performance(size_sample[[1]], size_sample[[2]], cont_response = cont_response)
cat(glue('End Iteration {i} of {MC}: Completed in {round(Sys.time() - start_time,2)}'),'\n')
}
cat(glue('Full Run Success: Completed in {round(Sys.time() - full_start_time,2)}'),'\n')
return_plot <- plot_best_tree_mc(return_df, binned_best_trees_mat, cont_best_trees_mat,
mse_perc_change_mat, "Optimal Trees for Steel Data")
mean_change <- round(mean_perc_change(binned_best_trees_mat, cont_best_trees_mat),3) * 100
cat(glue('Mean Percentage Binned Complexity to Reach Continuous Optimal: {mean_change} %'),'\n')
sd_change <- round(sd_perc_change(binned_best_trees_mat, cont_best_trees_mat),3) * 100
cat(glue('SD Percentage Binned Complexity to Reach Continuous Optimal: {sd_change} %'),'\n')
se_change <- round(SE_perc_change(binned_best_trees_mat, cont_best_trees_mat),3) * 100
cat(glue('SE Percentage Binned Complexity to Reach Continuous Optimal: {se_change} %'),'\n')
return(return_plot)
}
source('C:/Users/mckad/Documents/USU Coursework/Thesis Work/Ordinal Classification/ordinal_helper_methods.R')
source('C:/Users/mckad/Documents/USU Coursework/Thesis Work/Ordinal Classification/main_helper_methods.R')
library(gbm)
library(fastDummies)
library(parallel)
library(tidyverse)
library(MLmetrics)
library(plyr)
library(ggplot2)
## GLOBALS
# SIZES = unique(round(10^(seq(from=1.2, to=3.8, length=20))))*5
SIZES = unique(round(10^(seq(from=1, to=2.27, length=20))))*5
MC <- 50
MIN_TREES <- 1
MAX_TREES <- 2
TREE_LENGTH <- 30
MC <- 5
concrete <- read.table('C:/Users/mckad/Documents/USU Coursework/Thesis Work/Ordinal Classification/datasets/concrete/concrete.csv', sep = ",", header = TRUE)
names <- c("cement", "blast", "fly_ash", "water", "plastic", "coarse", "fine", "age", "strength")
colnames(concrete) <- names
concrete_binned <- bin_df(concrete, "strength", num_bins = 10)
concrete_encoded <- concrete_binned[,c(-(ncol(concrete_binned)-1),-ncol(concrete_binned))]
orchestrate_sample_sim(MC, SIZES, concrete_encoded, cont_response = "strength", num_classes = 10)
orchestrate_sample_sim <- function(MC, SIZES, dataset, cont_response,
MIN_TREES = 1, MAX_TREES = 3,TREE_LENGTH = 20, num_classes = 5){
binned_best_trees_mat <- matrix(NA, nrow = MC, ncol = length(SIZES))
cont_best_trees_mat <- matrix(NA, nrow = MC, ncol = length(SIZES))
mse_perc_change_mat <- matrix(NA, nrow = MC, ncol = length(SIZES))
# rf_mse_perc_change <- vector(mode = "list", length = length(MC)) %>% unlist()
full_start_time = Sys.time()
for(i in 1:MC){
start_time = Sys.time()
cat(glue('Begin Monte Carlo Iteration {i} of {MC}'), '\n')
for (j in 1:length(SIZES)){
cat(glue('----Begin Iteration {j} of {length(SIZES)} with n = {SIZES[j]}', '\n', '\n'))
if (num_classes == 10){
sub_sample <- sample_by_distribution_ten(dataset, size = SIZES[j])
} else if (num_classes == 5){
sub_sample <- sample_by_distribution(dataset, size = SIZES[j])
} else{
cat(glue("Number of classes {num_classes} is invalid."))
return(NA)
}
train <- sub_sample[[1]]
test <- sub_sample[[2]]
return_df <- run_sim(train = train,
test = test,
cont_response = cont_response,
min_trees = MIN_TREES,
max_trees = MAX_TREES,
tree_length = TREE_LENGTH,
plot = FALSE)
binned_thresh <- min(return_df$test_mat) * 1.01
cont_thresh <- min(return_df$test_cont_mat) * 1.01
binned_best_trees_mat[i,j] <- min(return_df[which(return_df$test_mat <= binned_thresh),
"tree_set"])
cont_best_trees_mat[i,j] <- min(return_df[which(return_df$test_cont_mat <= cont_thresh),
"tree_set"])
mse_perc_change_mat[i,j] <- mean(return_df$mse_perc_change)
# mse_perc_change_mat[i,j] <- RF_perc_change(return_df, train, test, cont_response)
}
# rf_mse_perc_change[i] <- RF_performance(size_sample[[1]], size_sample[[2]], cont_response = cont_response)
cat(glue('End Iteration {i} of {MC}: Completed in {round(Sys.time() - start_time,2)}'),'\n')
}
cat(glue('Full Run Success: Completed in {round(Sys.time() - full_start_time,2)}'),'\n')
return_plot <- plot_best_tree_mc(return_df, binned_best_trees_mat, cont_best_trees_mat,
mse_perc_change_mat, "Optimal Trees for Steel Data")
mean_change <- round(mean_perc_change(binned_best_trees_mat, cont_best_trees_mat),3) * 100
cat(glue('Mean Percentage Binned Complexity to Reach Continuous Optimal: {mean_change} %'),'\n')
sd_change <- round(sd_perc_change(binned_best_trees_mat, cont_best_trees_mat),3) * 100
cat(glue('SD Percentage Binned Complexity to Reach Continuous Optimal: {sd_change} %'),'\n')
se_change <- round(SE_perc_change(binned_best_trees_mat, cont_best_trees_mat),3) * 100
cat(glue('SE Percentage Binned Complexity to Reach Continuous Optimal: {se_change} %'),'\n')
return(return_plot)
}
concrete <- read.table('C:/Users/mckad/Documents/USU Coursework/Thesis Work/Ordinal Classification/datasets/concrete/concrete.csv', sep = ",", header = TRUE)
names <- c("cement", "blast", "fly_ash", "water", "plastic", "coarse", "fine", "age", "strength")
colnames(concrete) <- names
concrete_binned <- bin_df(concrete, "strength", num_bins = 10)
concrete_encoded <- concrete_binned[,c(-(ncol(concrete_binned)-1),-ncol(concrete_binned))]
orchestrate_sample_sim(MC, SIZES, concrete_encoded, cont_response = "strength", num_classes = 10)
conduct <- read.table('C:/Users/mckad/Documents/USU Coursework/Thesis Work/Ordinal Classification/datasets/conduct/train.csv', sep = ",", header = TRUE)
response <- "critical_temp"
conduct_names <- c(
response, "range_ThermalConductivity","wtd_std_ThermalConductivity","range_atomic_radius",
"wtd_gmean_ThermalConductivity","std_ThermalConductivity","wtd_entropy_Valence",
"wtd_std_ElectronAffinity","wtd_entropy_atomic_mass","wtd_mean_Valence",
"wtd_gmean_ElectronAffinity","wtd_range_ElectronAffinity","wtd_mean_ThermalConductivity",
"wtd_gmean_Valence","std_atomic_mass","std_Density","wtd_entropy_ThermalConductivity",
"wtd_range_ThermalConductivity","wtd_mean_atomic_mass","wtd_std_atomic_mass","gmean_Density"
)
conduct <- conduct[,(names(conduct) %in% conduct_names)]
# conduct$critical_temp <- log(conduct$critical_temp)
conduct_binned <- bin_df(conduct, response, num_bins = 10)
conduct_encoded <- conduct_binned[,c(-(ncol(conduct_binned)-1),-ncol(conduct_binned))]
orchestrate_sample_sim(MC, SIZES, conduct_encoded, cont_response = "critical_temp", num_classes = 10)
source('C:/Users/mckad/Documents/USU Coursework/Thesis Work/Ordinal Classification/ordinal_helper_methods.R')
source('C:/Users/mckad/Documents/USU Coursework/Thesis Work/Ordinal Classification/main_helper_methods.R')
library(gbm)
library(fastDummies)
library(parallel)
library(tidyverse)
library(MLmetrics)
library(plyr)
library(ggplot2)
## GLOBALS
# SIZES = unique(round(10^(seq(from=1.2, to=3.8, length=20))))*5
SIZES = unique(round(10^(seq(from=1, to=2.27, length=10))))*5
MC <- 2
MIN_TREES <- 1
MAX_TREES <- 2
TREE_LENGTH <- 10
conduct <- read.table('C:/Users/mckad/Documents/USU Coursework/Thesis Work/Ordinal Classification/datasets/conduct/train.csv', sep = ",", header = TRUE)
response <- "critical_temp"
conduct_names <- c(
response, "range_ThermalConductivity","wtd_std_ThermalConductivity","range_atomic_radius",
"wtd_gmean_ThermalConductivity","std_ThermalConductivity","wtd_entropy_Valence",
"wtd_std_ElectronAffinity","wtd_entropy_atomic_mass","wtd_mean_Valence",
"wtd_gmean_ElectronAffinity","wtd_range_ElectronAffinity","wtd_mean_ThermalConductivity",
"wtd_gmean_Valence","std_atomic_mass","std_Density","wtd_entropy_ThermalConductivity",
"wtd_range_ThermalConductivity","wtd_mean_atomic_mass","wtd_std_atomic_mass","gmean_Density"
)
conduct <- conduct[,(names(conduct) %in% conduct_names)]
# conduct$critical_temp <- log(conduct$critical_temp)
conduct_binned <- bin_df(conduct, response, num_bins = 10)
conduct_encoded <- conduct_binned[,c(-(ncol(conduct_binned)-1),-ncol(conduct_binned))]
orchestrate_sample_sim(MC, SIZES, conduct_encoded, cont_response = "critical_temp", num_classes = 10)
conduct <- read.table('C:/Users/mckad/Documents/USU Coursework/Thesis Work/Ordinal Classification/datasets/conduct/train.csv', sep = ",", header = TRUE)
response <- "critical_temp"
conduct_names <- c(
response, "range_ThermalConductivity","wtd_std_ThermalConductivity","range_atomic_radius",
"wtd_gmean_ThermalConductivity","std_ThermalConductivity","wtd_entropy_Valence",
"wtd_std_ElectronAffinity","wtd_entropy_atomic_mass","wtd_mean_Valence",
"wtd_gmean_ElectronAffinity","wtd_range_ElectronAffinity","wtd_mean_ThermalConductivity",
"wtd_gmean_Valence","std_atomic_mass","std_Density","wtd_entropy_ThermalConductivity",
"wtd_range_ThermalConductivity","wtd_mean_atomic_mass","wtd_std_atomic_mass","gmean_Density"
)
conduct <- conduct[,(names(conduct) %in% conduct_names)]
conduct_binned <- bin_df(conduct, response)
conduct_encoded <- conduct_binned[,c(-(ncol(conduct_binned)-1),-ncol(conduct_binned))]
orchestrate_sample_sim(MC, SIZES, conduct_encoded, cont_response = "critical_temp")
# Read in the data
steel <- read.table('C:/Users/mckad/Documents/USU Coursework/Thesis Work/Ordinal Classification/datasets/steel/steel.csv', sep = ",", header = TRUE)[-1]
# steel$Usage_kWh <- log(steel$Usage_kWh)
# steel <- steel[is.finite(steel$Usage_kWh),]
steel_binned <- bin_df(steel, "Usage_kWh", num_bins = 10)
steel_encoded <- steel_binned[,c(-(ncol(steel_binned)-1),-ncol(steel_binned))]
cols_to_encode = c("WeekStatus", "Day_of_week", "Load_Type")
steel_encoded <- dummy_cols(steel_encoded, select_columns = cols_to_encode) %>%
dplyr::select(-all_of(cols_to_encode))
orchestrate_sample_sim(MC, SIZES, steel_encoded, cont_response = "Usage_kWh", num_classes = 10)
# Read in the data
steel <- read.table('C:/Users/mckad/Documents/USU Coursework/Thesis Work/Ordinal Classification/datasets/steel/steel.csv', sep = ",", header = TRUE)[-1]
# steel$Usage_kWh <- log(steel$Usage_kWh)
# steel <- steel[is.finite(steel$Usage_kWh),]
steel_binned <- bin_df(steel, "Usage_kWh")
steel_encoded <- steel_binned[,c(-(ncol(steel_binned)-1),-ncol(steel_binned))]
cols_to_encode = c("WeekStatus", "Day_of_week", "Load_Type")
steel_encoded <- dummy_cols(steel_encoded, select_columns = cols_to_encode) %>%
dplyr::select(-all_of(cols_to_encode))
orchestrate_sample_sim(MC, SIZES, steel_encoded, cont_response = "Usage_kWh")
SIZES = unique(round(10^(seq(from=1, to=2.27, length=20))))*5
MC <- 10
MIN_TREES <- 1
MAX_TREES <- 3
TREE_LENGTH <- 20
# Read in the data
steel <- read.table('C:/Users/mckad/Documents/USU Coursework/Thesis Work/Ordinal Classification/datasets/steel/steel.csv', sep = ",", header = TRUE)[-1]
# steel$Usage_kWh <- log(steel$Usage_kWh)
# steel <- steel[is.finite(steel$Usage_kWh),]
steel_binned <- bin_df(steel, "Usage_kWh")
steel_encoded <- steel_binned[,c(-(ncol(steel_binned)-1),-ncol(steel_binned))]
cols_to_encode = c("WeekStatus", "Day_of_week", "Load_Type")
steel_encoded <- dummy_cols(steel_encoded, select_columns = cols_to_encode) %>%
dplyr::select(-all_of(cols_to_encode))
orchestrate_sample_sim(MC, SIZES, steel_encoded, cont_response = "Usage_kWh")
# Read in the data
steel <- read.table('C:/Users/mckad/Documents/USU Coursework/Thesis Work/Ordinal Classification/datasets/steel/steel.csv', sep = ",", header = TRUE)[-1]
# steel$Usage_kWh <- log(steel$Usage_kWh)
# steel <- steel[is.finite(steel$Usage_kWh),]
steel_binned <- bin_df(steel, "Usage_kWh", num_bins = 10)
steel_encoded <- steel_binned[,c(-(ncol(steel_binned)-1),-ncol(steel_binned))]
cols_to_encode = c("WeekStatus", "Day_of_week", "Load_Type")
steel_encoded <- dummy_cols(steel_encoded, select_columns = cols_to_encode) %>%
dplyr::select(-all_of(cols_to_encode))
orchestrate_sample_sim(MC, SIZES, steel_encoded, cont_response = "Usage_kWh", num_classes = 10)
# Read in the data
steel <- read.table('C:/Users/mckad/Documents/USU Coursework/Thesis Work/Ordinal Classification/datasets/steel/steel.csv', sep = ",", header = TRUE)[-1]
# steel$Usage_kWh <- log(steel$Usage_kWh)
# steel <- steel[is.finite(steel$Usage_kWh),]
steel_binned <- bin_df(steel, "Usage_kWh")
steel_encoded <- steel_binned[,c(-(ncol(steel_binned)-1),-ncol(steel_binned))]
cols_to_encode = c("WeekStatus", "Day_of_week", "Load_Type")
steel_encoded <- dummy_cols(steel_encoded, select_columns = cols_to_encode) %>%
dplyr::select(-all_of(cols_to_encode))
orchestrate_sample_sim(MC, SIZES, steel_encoded, cont_response = "Usage_kWh")
